# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Despliegue a Server

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:

  generate-env:

    environment: production

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Generar environment docker-compose
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_API_PORT: ${{secrets.DOCKER_API_PORT}}
          envkey_API_HTTPS_PORT: ${{secrets.DOCKER_API_HTTPS_PORT}}
          envkey_API_ENV: ${{secrets.DOCKER_API_ENVIRONMENT}}
          envkey_API_CERT_PASS: ${{secrets.API_CERT_PASS}}
          envkey_SQL_ROOT_PASS: ${{secrets.DOCKER_SQL_ROOT_PASS}}
          envkey_SQL_USER: ${{secrets.DOCKER_SQL_USER}}
          envkey_SQL_USER_PASS: ${{secrets.DOCKER_SQL_PASSWORD}}
          envkey_SQL_PORT: ${{secrets.DOCKER_SQL_PORT}}
          envkey_UI_PORT: ${{secrets.DOCKER_UI_PORT}}
          directory: docker-compose
          file_name: .env
          fail_on_empty: true

      - name: Cachear .env docker-compose
        uses: actions/upload-artifact@v2
        with:
          name: dist-env-docker
          path: docker-compose

  build-angular:

    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: webui/enigma-ui

    steps:
      - uses: actions/checkout@v3
 
      - name: Usar Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
 
      - name: Instalar pnpm
        uses: pnpm/action-setup@v2.0.1
        id: pnpm-install
        with:
          version: 7
          run_install: false
  
      - name: Obtener directorio de almacenamiento pnpm
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"
  
      - name: Configurar cache pnpm
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
  
      - name: Instalar dependencias Angular
        run: pnpm install
  
      - name: Compilar Angular
        run: pnpm run build
       
      - name: Cachear distribuibles Angular
        uses: actions/upload-artifact@v2
        with:
          name: dist-angular
          path: webui/enigma-ui/dist/enigma-ui/

  generate-api-certificate:

    environment: production

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: docker-compose
      
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generar Clave Privada
        run: openssl req -config https.config -new -out csr.pem

      - name: Generar Certificado Auto Firmado
        run: openssl x509 -req -days 365 -extfile https.config -extensions v3_req -in csr.pem -signkey key.pem -out EnigmaBudget.WebApi.crt

      - name: Generar certificado en formato PFX
        run: openssl pkcs12 -export -out EnigmaBudget.WebApi.pfx -inkey key.pem -in EnigmaBudget.WebApi.crt -password pass:${{secrets.API_CERT_PASS}}

      - name: Cachear distribuibles .NET Core
        uses: actions/upload-artifact@v2
        with:
          name: dist-api-cert
          path: docker-compose
      
  build-api:

    runs-on: ubuntu-latest

    needs: [generate-api-certificate]   

    defaults:
      run:
        working-directory: webapi/EnigmaBudget

    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core SDK 6.x
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.x'

      - name: Instalar dependencias de proyecto
        run: dotnet restore

      - name: Compilar WebApi
        run: dotnet build --configuration Release --no-restore

      - name: Cachear distribuibles .NET Core
        uses: actions/upload-artifact@v2
        with:
          name: dist-netcore
          path: webapi/EnigmaBudget/EnigmaBudget.WebApi/bin/Release/net6.0

  deploy-to-server:

    needs: [generate-env, build-angular, build-api]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Configurar Clave SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{secrets.SSH_PRIVATE_KEY}} 
          known_hosts: unnecessary
          
      - name: Agregar Clientes Conocidos
        run: ssh-keyscan -p ${{secrets.SSH_PORT}} -H ${{secrets.SSH_HOST}}  >> ~/.ssh/known_hosts
  
      - name: Crear carpetas para despliegue si no existen 
        uses: D3rHase/ssh-command-action@v0.2.1
        with:
          HOST: ${{secrets.SSH_HOST}}
          PORT: ${{secrets.SSH_PORT}}
          USER: ${{secrets.SSH_USER}}
          PRIVATE_SSH_KEY: ${{secrets.SSH_PRIVATE_KEY}}
          COMMAND: |
            mkdir -p ${{secrets.DEPLOY_PATH}}
            mkdir -p ${{secrets.DEPLOY_PATH}}/www/ui
            mkdir -p ${{secrets.DEPLOY_PATH}}/api/bin
  
      - name: Restaurar environment docker-compose
        uses: actions/download-artifact@v2
        with:
          name: dist-env-docker
          path: docker-compose

      - name: Copiar docker-compose
        run: rsync -avz -e "ssh -p ${{secrets.SSH_PORT}}" docker-compose/ ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}}:${{secrets.DEPLOY_PATH}}

      - name: Restaurar distribuibles Angular
        uses: actions/download-artifact@v2
        with:
          name: dist-angular
          path: dist-angular

      - name: Copiar archivos de UI con rsync
        run: rsync -avz -e "ssh -p ${{secrets.SSH_PORT}}" dist-angular/ ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}}:${{secrets.DEPLOY_PATH}}/www/ui
  
      - name: Restaurar arctifact distribuibles .NET
        uses: actions/download-artifact@v2
        with:
          name: dist-netcore
          path: dist-netcore

      - name: Copiar archivos de API con rsync
        run: rsync -avz -e "ssh -p ${{secrets.SSH_PORT}}" dist-netcore/ ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}}:${{secrets.DEPLOY_PATH}}/api/bin

      - name: Restaurar arctifact certificado API
        uses: actions/download-artifact@v2
        with:
          name: dist-api-cert
          path: dist-api-cert

      - name: Copiar archivos certificado API con rsync
        run: rsync -avz -e "ssh -p ${{secrets.SSH_PORT}}" dist-api-cert/ ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}}:${{secrets.DEPLOY_PATH}}/api/https

      - name: Volver a ejecutar docker-compose
        uses: D3rHase/ssh-command-action@v0.2.1
        with:
          HOST: ${{secrets.SSH_HOST}}
          PORT: ${{secrets.SSH_PORT}}
          USER: ${{secrets.SSH_USER}}
          PRIVATE_SSH_KEY: ${{secrets.SSH_PRIVATE_KEY}}
          COMMAND: |
            cd ${{secrets.DEPLOY_PATH}}
            docker-compose up -d