# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 16.x]

    steps:

    - uses: actions/checkout@v3
    - name: Usar Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - uses: pnpm/action-setup@v2.0.1
      name: Instalar pnpm
      id: pnpm-install
      with:
        version: 7
        run_install: false

    - name: Obtener directorio de almacenamiento pnpm
      id: pnpm-cache
      run: |
        echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

    - uses: actions/cache@v3
      name: Configurar cache pnpm
      with:
        path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Instalar dependencias Angular
      run: pnpm install
      working-directory: ./webui/enigma-ui

    - name: Compilar Angular
      run: pnpm run build
      working-directory: ./webui/enigma-ui
      
    - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.x'

    - name: Install dependencies
      run: dotnet restore
      working-directory: ./webapi/EnigmaBudget
    - name: Build
      run: dotnet build --configuration Release --no-restore
      working-directory: ./webapi/EnigmaBudget

    - name: Configurar Clave SSH
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }} 
        known_hosts: unnecessary
        
    - name: Agregar Clientes Conocidos
      run: ssh-keyscan -p ${{secrets.SSH_PORT}} -H ${{secrets.SSH_HOST}}  >> ~/.ssh/known_hosts

    - name: Crear carpetas para despliegue si no existen 
      uses: D3rHase/ssh-command-action@v0.2.1
      with:
        HOST: ${{secrets.SSH_HOST}}
        PORT: ${{secrets.SSH_PORT}}
        USER: ${{secrets.SSH_USER}}
        PRIVATE_SSH_KEY: ${{secrets.SSH_PRIVATE_KEY}}
        COMMAND: |
          mkdir -p ${{secrets.DEPLOY_PATH}}
          mkdir -p ${{secrets.DEPLOY_PATH}}/www/ui
          mkdir -p ${{secrets.DEPLOY_PATH}}/api/bin

    - name: Copiar docker-compose
      run: rsync -avz -e "ssh -p ${{secrets.SSH_PORT}}" ./docker-compose/ ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}}:${{secrets.DEPLOY_PATH}}

    - name: Copiar archivos de UI con rsync
      run: rsync -avz -e "ssh -p ${{secrets.SSH_PORT}}" ./webui/enigma-ui/dist/enigma-ui/ ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}}:${{secrets.DEPLOY_PATH}}/www/ui

    - name: Copiar archivos de API con rsync
      run: rsync -avz -e "ssh -p ${{secrets.SSH_PORT}}" ./webapi/EnigmaBudget/EnigmaBudget.WebApi/bin/Release/net6.0/ ${{secrets.SSH_USER}}@${{secrets.SSH_HOST}}:${{secrets.DEPLOY_PATH}}/api/bin

